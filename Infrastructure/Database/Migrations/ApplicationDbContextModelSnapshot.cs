// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DocumentSharing.ShareRule.ShareRules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<int>("Scope")
                        .HasColumnType("integer")
                        .HasColumnName("scope");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_share_rules");

                    b.ToTable("share_rules", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.Files.FileVersions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid?>("FilesId")
                        .HasColumnType("uuid")
                        .HasColumnName("files_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_file_versions");

                    b.HasIndex("FilesId")
                        .HasDatabaseName("ix_file_versions_files_id");

                    b.ToTable("file_versions", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.Files.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("LastModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modify")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ParentFolderId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_folder_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ParentFolderId")
                        .HasDatabaseName("ix_files_parent_folder_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.Folders.Folders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("folder_name");

                    b.Property<DateTime>("LastModify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modify")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_folder_id");

                    b.HasKey("Id")
                        .HasName("pk_folders");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("Domain.Documents.Files.FileVersions", b =>
                {
                    b.HasOne("Domain.Documents.Files.Files", null)
                        .WithMany("FileVersions")
                        .HasForeignKey("FilesId")
                        .HasConstraintName("fk_file_versions_files_files_id");

                    b.OwnsOne("Domain.Common.ValueObjects.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("FileVersionsId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("metadata_content_type");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint")
                                .HasColumnName("metadata_size");

                            b1.HasKey("FileVersionsId");

                            b1.ToTable("file_versions");

                            b1.WithOwner()
                                .HasForeignKey("FileVersionsId")
                                .HasConstraintName("fk_file_versions_file_versions_id");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Documents.Files.Files", b =>
                {
                    b.HasOne("Domain.Documents.Folders.Folders", null)
                        .WithMany()
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_files_folders_parent_folder_id");
                });

            modelBuilder.Entity("Domain.Documents.Files.Files", b =>
                {
                    b.Navigation("FileVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
